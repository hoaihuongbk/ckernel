///////////////////////////////////////////////////////////
//  DotNetWebFormBuilder.cs
//  Implementation of the Class DotNetWebFormBuilder
//  Generated by Enterprise Architect
//  Created on:      15-Dec-2014 3:35:21 PM
//  Original author: baovan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using cService;
using CTool.Builder.File;
using CTool.Lib;
using OMS.Ice.T4Generator;

namespace CTool.Builder.CSharp
{
    public class DotNetWebFormBuilder : IBuilder
    {
        private readonly S _s;
        private readonly Dictionary<string, string> _tpl = new Dictionary<string, string>
        {
            {"aspx", Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"Templates\CSharp\DotNetWebForm\Aspx.t4") },
            {"aspx.cs", Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"Templates\CSharp\DotNetWebForm\Aspx.Cs.t4") },
            {"js", Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"Templates\Js\PageScript.t4") },
            {"helper", Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"Templates\CSharp\DotNetWebForm\PageHelper.Cs.t4") },
            {"config", Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"Templates\CSharp\DotNetWebForm\Web.config.t4") }
        };

        public DotNetWebFormBuilder()
        {
            _s = new S(ConfigurationManager.ConnectionStrings["cConStr"].ConnectionString, Convert.ToBoolean(ConfigurationManager.AppSettings["isDebug"]));
        }

        /// 
        /// <param name="appId"></param>
        public void BuildApp(int appId)
        {

            //Get app info
            var obj = new Dictionary<string, object>
            {
                {"_a", "fGetgc_App"},
                {"_c", new Dictionary<string, object>
                {
                        {"Id", appId}   
                    }
                },
                {"_f", "Id, Name"}
            };


            var robj = _s.P(obj);
            var records = robj.GetType().GetProperty("Records").GetValue(robj, null) as List<object[]>;
            if (records != null && records.Count > 0)
            {
                var appName = Convert.ToString(records[0][1]);
                
                //Build directory structure
                var f = new FileWriter();
                var xmlPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory,
                    @"Templates\CSharp\DotNetWebForm\Directory.xml");

                f.GenerateAppDirectory(appName, xmlPath);

                //Copy lib files
                var objBuilderPath = String.Format(@"{0}\\ObjectBuilder", HttpContext.Current.Request.PhysicalApplicationPath);

                var appBuilderPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory,
                    String.Format(ConfigurationManager.AppSettings["AppBuilderPath"] + "\\{0}", appName));

                System.IO.File.Copy(String.Format(objBuilderPath + "\\{0}", "cKernel.dll"),
                    String.Format(appBuilderPath + "\\Libs\\{0}", "cKernel.dll"), true);

                System.IO.File.Copy(String.Format(objBuilderPath + "\\{0}", "cKernel.Extend.dll"),
                    String.Format(appBuilderPath + "\\Libs\\{0}", "cKernel.Extend.dll"), true);

                System.IO.File.Copy(String.Format(objBuilderPath + "\\{0}", "cDict.dll"),
                    String.Format(appBuilderPath + "\\Libs\\{0}", "cDict.dll"), true);

                System.IO.File.Copy(String.Format(objBuilderPath + "\\{0}", "cService.dll"),
                    String.Format(appBuilderPath + "\\Libs\\{0}", "cService.dll"), true);

                //Helper, Web config
                var helperPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory,
                                String.Format(ConfigurationManager.AppSettings["AppBuilderPath"] + "\\{0}\\Libs\\PageHelper.cs",
                                    appName));
                var configPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory,
                              String.Format(ConfigurationManager.AppSettings["AppBuilderPath"] + "\\{0}\\Web.config",
                                  appName));

                IGenerator g = new Generator();
                g.GenerateToFile(_tpl["helper"], helperPath
                    , new object[] { appName });
                g.GenerateToFile(_tpl["config"], configPath
                   , new object[] {  });
                

                //Get app pages
                var pobj = new Dictionary<string, object>
                {
                    {"_a", "fGetgc_Page"},
                    {"_c", new Dictionary<string, object>
                    {
                            {"AppId", appId}   
                        }
                    },
                    {"_f", "Id"}
                };
                var probj = _s.P(pobj);
                var precords = probj.GetType().GetProperty("Records").GetValue(probj, null) as List<object[]>;
                if (precords != null && precords.Count > 0)
                {
                    foreach (var t in precords)
                    {
                        BuildPage(Convert.ToInt32(t[0]), appName);
                    }
                }
            }
            else
            {
                Debug.WriteLine("App not found");
            }
        }

        /// 
        /// <param name="appId"></param>
        public void BuildAppFast(int appId)
        {

            //Get app info
            var obj = new Dictionary<string, object>
            {
                {"_a", "fGetgc_App"},
                {"_c", new Dictionary<string, object>
                {
                        {"Id", appId}   
                    }
                },
                {"_f", "Id, Name"}
            };

            var robj = _s.P(obj);
            var records = robj.GetType().GetProperty("Records").GetValue(robj, null) as List<object[]>;
            if (records != null && records.Count > 0)
            {
                //Get app pages
                var pobj = new Dictionary<string, object>
                {
                    {"_a", "fGetgc_Page"},
                    {"_c", new Dictionary<string, object>
                    {
                            {"AppId", appId}   
                        }
                    },
                    {"_f", "Id"}
                };
                var probj = _s.P(pobj);
                var precords = probj.GetType().GetProperty("Records").GetValue(probj, null) as List<object[]>;
                if (precords != null && precords.Count > 0)
                {
                    foreach (var t in precords)
                    {
                        BuildPageFast(Convert.ToInt32(t[0]), Convert.ToString(records[0][1]));
                    }
                }
            }
            else
            {
                Debug.WriteLine("App not found");
            }
        }

        /// 
        /// <param name="templateId"></param>
        public string BuildTemplate(int templateId)
        {
            var layout = String.Empty;
            try
            {
                var tobj = new Dictionary<string, object>
                {
                    {"_a", "fGetgc_Template"},
                    {
                        "_c", new Dictionary<string, object>
                        {
                            {"Id", templateId}
                        }
                    },
                    {"_f", "FilePath"}
                };
                var trobj = _s.P(tobj);
                var trecords = trobj.GetType().GetProperty("Records").GetValue(trobj, null) as List<object[]>;
                if (trecords != null && trecords.Count > 0)
                {
                    layout =
                        System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath(Convert.ToString(trecords[0][0])));

                    while (Regex.IsMatch(layout, @"\{\{\w+\}\}"))
                    {
                        var slot = Regex.Matches(layout, @"\{\{(\w+)\}\}");
                        foreach (Match m in slot)
                        {
                            var obj = new Dictionary<string, object>
                            {
                                {"_a", "fGetgc_Template_Slot"},
                                {
                                    "_c", new Dictionary<string, object>
                                    {
                                        {"SlotCode", m.Value}
                                    }
                                },
                                {"_f", "TemplateId2"}
                            };

                            var robj = _s.P(obj);
                            var records = robj.GetType().GetProperty("Records").GetValue(robj, null) as List<object[]>;
                            if (records != null && records.Count > 0)
                            {
                                var t2Obj = new Dictionary<string, object>
                                {
                                    {"_a", "fGetgc_Template"},
                                    {
                                        "_c", new Dictionary<string, object>
                                        {
                                            {"Id", Convert.ToInt32(records[0][0])}
                                        }
                                    },
                                    {"_f", "FilePath"}
                                };

                                var t2Robj = _s.P(t2Obj);
                                var t2Records =
                                    robj.GetType().GetProperty("Records").GetValue(t2Robj, null) as List<object[]>;
                                if (t2Records != null && t2Records.Count > 0)
                                {
                                    var filePath = Convert.ToString(t2Records[0][0]);
                                    if (String.IsNullOrEmpty(filePath))
                                    {
                                        layout = layout.Replace(m.Value, String.Format("Missing template or not found file path \"{0}\"", filePath));
                                    }
                                    else
                                    {
                                        var tpl = System.IO.File.ReadAllText( HttpContext.Current.Server.MapPath(filePath));
                                        layout = layout.Replace(m.Value, tpl);
                                    }
                                    
                                }

                            }
                        }
                    }

                    
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex);
            }

            return layout;
        }

        public string BuildTemplateFast00(int rootTemplateId)
        {
            var res = String.Empty;
            var templatePath = GetTemplatePath_ById(rootTemplateId);
            if (templatePath == "") return res;
            var layout = ReadFile(templatePath);
            var layoutFr = new FastReplacer("{{", "}}");
            layoutFr.Append(layout);
            var slots = layoutFr.GetTokens();
            while (slots.Count != 0)
            {
                foreach (var slot in slots)
                {
                    var tpl = GetTemplate_BySlotCode(slot);
                    //if (String.IsNullOrEmpty(tpl)) Debug.WriteLine("Missing Template for slot:"+slot);
                    layoutFr.Replace(slot, tpl); //If not found=> replace by String.Empty
                }
                slots = layoutFr.GetTokens();
            }
            layout = layoutFr.ToString();
            return layout;

        }
        public string BuildTemplateFast01(int rootTemplateId)
        {
            var templatePaths = GetTemplatePaths_ByRootId(rootTemplateId);
            var res = String.Empty;
            var templatePath = GetTemplatePath_ById(rootTemplateId);
            if (templatePath == "") return res;
            var layout = ReadFile(templatePath);
            var layoutFr = new FastReplacer("{{", "}}");
            layoutFr.Append(layout);
            var slots = layoutFr.GetTokens();
            while (slots.Count != 0)
            {
                foreach (var slot in slots)
                {
                    templatePaths.TryGetValue(slot, out templatePath);
                    var tpl = ReadFile(templatePath);
                    //if (String.IsNullOrEmpty(tpl)) Debug.WriteLine("Missing Template for slot:"+slot);
                    layoutFr.Replace(slot, tpl); //If not found=> replace by String.Empty
                }
                slots = layoutFr.GetTokens();
            }
            layout = layoutFr.ToString();
            return layout;

        }
        private Dictionary<string, string> GetTemplatePaths_ByRootId(int rootTemplateId)
        {
            var obj = new Dictionary<string, object>
            {
                                    {"_a", "fGetgc_Template_Slot_View00"},
                                    {"_c", new Dictionary<string, object>
                                    {
                                            {"TemplateId1", rootTemplateId}   
                                        }
                                    },
                                    {"_f", "Id, SlotCode, FilePath, Code"}
                                };


            var robj = _s.P(obj);
            var records = robj.GetType().GetProperty("Records").GetValue(robj, null) as List<object[]>;
            var templatePaths = new Dictionary<string, string>();
            if (records != null && records.Count > 0)
            {
                foreach (var record in records)
                {
                    templatePaths.Add(Convert.ToString(record[1]), Convert.ToString(record[2]));
                }
            }
            return templatePaths;
        }

        private string GetTemplate_BySlotCode(string slotCode)
        {
            var res = String.Empty;
            var templateId = GetTemplateId_BySlotCode(slotCode);
            if (templateId == 0) return res;
            var templatePath = GetTemplatePath_ById(templateId);
            if (templatePath == "") return res;
            res = ReadFile(templatePath);
            return res;
        }

        private string ReadFile(string templatePath)
        {
            var res = String.Empty;
            try
            {
                res = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath(templatePath));
                return res;
            }
            catch (FileNotFoundException ex)
            {
                // Write error.
                Debug.WriteLine(ex);
                return res;
            }
        }

        private string GetTemplatePath_ById(int templateId)
        {
            var templatePath = "";
            var t2Obj = new Dictionary<string, object>
            {
                                    {"_a", "fGetgc_Template"},
                                    {"_c", new Dictionary<string, object>
                                    {
                                            {"Id", templateId}   
                                        }
                                    },
                                    {"_f", "FilePath"}
                                };

            var t2Robj = _s.P(t2Obj);
            var t2Records = t2Robj.GetType().GetProperty("Records").GetValue(t2Robj, null) as List<object[]>;

            if (t2Records != null && t2Records.Count > 0)
            {
                templatePath = Convert.ToString(t2Records[0][0]);
            }
            return templatePath;
        }
        private int GetTemplateId_BySlotCode(string slotCode)
        {
            var templateId = 0;
            var obj = new Dictionary<string, object>
            {
                                {"_a", "fGetgc_Template_Slot"},
                                {"_c", new Dictionary<string, object>
                                {
                                        {"SlotCode", slotCode}   //Thiếu điều kiện TemplateId2 (template cha) =1
                                    }
                                },
                                {"_f", "TemplateId1"}
                            };


            var robj = _s.P(obj);
            var records = robj.GetType().GetProperty("Records").GetValue(robj, null) as List<object[]>;
            if (records != null && records.Count > 0)
            {
                templateId = Convert.ToInt32(records[0][0]);
            }
            return templateId;
        }

        /// 
        /// <param name="pageId"></param>
        /// <param name="nameSpace"></param>
        public void BuildPage(int pageId, string nameSpace)
        {
            try
            {
                var tobj = new Dictionary<string, object>
                {
                    {"_a", "fGetgc_Page"},
                    {
                        "_c", new Dictionary<string, object>
                        {
                            {"Id", pageId}
                        }
                    },
                    {"_f", "Id, Name"}
                };
                var trobj = _s.P(tobj);
                var trecords = trobj.GetType().GetProperty("Records").GetValue(trobj, null) as List<object[]>;
                if (trecords != null && trecords.Count > 0)
                {
                    //Get page template
                    var obj = new Dictionary<string, object>
                    {
                        {"_a", "fGetgc_Page_Template"},
                        {
                            "_c", new Dictionary<string, object>
                            {
                                {"PageId", pageId},
                                {"IsActive", 1}
                            }
                        },
                        {"_f", "Id"}
                    };

                    var robj = _s.P(obj);
                    var records = robj.GetType().GetProperty("Records").GetValue(robj, null) as List<object[]>;
                    if (records != null)
                    {
                        //Get template
                        var rootTemplateId = Convert.ToInt32(records[0][0]);
                        var template = BuildTemplate(rootTemplateId);

                        //Get page params
                        var pobj = new Dictionary<string, object>
                        {
                            {"_a", "fGetgc_Page_Param"},
                            {
                                "_c", new Dictionary<string, object>
                                {
                                    {"PageId", pageId}
                                }
                            },
                            {"_f", "Name"}
                        };

                        var probj = _s.P(pobj);
                        var precords = robj.GetType().GetProperty("Records").GetValue(probj, null) as List<object[]>;

                        //Get page url paterns
                        //Get page params
                        var uobj = new Dictionary<string, object>
                        {
                            {"_a", "fGetgc_Page_URLFormat"},
                            {
                                "_c", new Dictionary<string, object>
                                {
                                    {"PageId", pageId}
                                }
                            },
                            {"_f", "HasKey, ParseFormat"}
                        };


                        var urobj = _s.P(uobj);
                        var urecords = robj.GetType().GetProperty("Records").GetValue(urobj, null) as List<object[]>;

                        if (!String.IsNullOrEmpty(template))
                        {
                            var pageName = Regex.Replace(Convert.ToString(trecords[0][1]), @"\s+", "");
                            var aspxPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory,
                                String.Format(ConfigurationManager.AppSettings["AppBuilderPath"] + "\\{0}\\{1}.aspx",
                                    nameSpace, pageName));
                            var behindPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory,
                                String.Format(ConfigurationManager.AppSettings["AppBuilderPath"] + "\\{0}\\{1}.aspx.cs",
                                    nameSpace, pageName));

                            var jsPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory,
                               String.Format(ConfigurationManager.AppSettings["AppBuilderPath"] + "\\{0}\\Scripts\\{1}.js",
                                   nameSpace, pageName));

                            var requestFields = new List<string>();
                            var requestFieldDefaultValues = new List<string>();
                            if (precords != null)
                            {
                                foreach (var p in precords)
                                {
                                    requestFields.Add(Convert.ToString(p[0]));
                                    requestFieldDefaultValues.Add(String.Empty);
                                }
                            }

                            var paterns = new Dictionary<string, string>();
                            if (urecords != null)
                            {
                                foreach (var u in urecords)
                                {
                                    paterns.Add(Convert.ToString(u[0]), Convert.ToString(u[1]));
                                }
                            }

                            //Get config data
                            var cobj = new Dictionary<string, object>
                            {
                                {"_a", "fGetgc_Page_Data_View00"},
                                {
                                    "_c", new Dictionary<string, object>
                                    {
                                        {"PageId", pageId}
                                    }
                                },
                                {"_f", "Name, Action , Conditions, Fields, BindingType, BindingName, BindingAttributeName, TemplatePath, BindingPageDataValue"}
                            };

                            var crobj = _s.P(cobj);
                            var crecords = robj.GetType().GetProperty("Records").GetValue(crobj, null) as List<object[]>;
                            var bindings = new Dictionary<string, Dictionary<string, object[]>>();

                            if (crecords != null && crecords.Count > 0)
                            {
                                foreach (var item in crecords)
                                {
                                    var tmp = Convert.ToString(item[2]).Split(new[] {','});
                                    var cItem = new StringBuilder("");
                                    foreach (var it in tmp)
                                    {
                                        var tmp2 = Convert.ToString(it).Split(new[] { ':' });
                                        var type = Convert.ToInt32(tmp2[0]);
                                        if (3 == type)
                                        {
                                            cItem.Append(String.Format("{{ \"{0}\", _requestParams[\"{1}\"] }},",
                                                new object[] {tmp2[1], tmp2[2]}));
                                        }
                                        else
                                        {
                                            cItem.Append(String.Format("{{ \"{0}\", \"{1}\" }},",
                                                new object[] { tmp2[1], tmp2[2] }));
                                        }
                                    }
                                    item[2] = cItem.ToString().Trim(new []{','});

                                    var tmp3 = Convert.ToString(item[3]).Split(new[] { ',' });
                                    var fItem = new StringBuilder("");
                                    foreach (var ft in tmp3)
                                    {
                                        fItem.Append(String.Format("\"{0}\",", ft));
                                    }
                                    item[3] = fItem.ToString().Trim(new[] { ',' });

                                    //Read template to string
                                    item[7] = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath(Convert.ToString(item[7]))).Replace("\"", "\'");

                                    var bvalue = Convert.ToString(item[8]);
                                    if (String.IsNullOrEmpty(bvalue))
                                    {
                                        bvalue = "*";
                                    }

                                    var name = Convert.ToString(item[0]);
                                    if (!bindings.ContainsKey(name))
                                    {
                                        bindings.Add(name, new Dictionary<string, object[]>());
                                    }
                                    if (!bindings[name].ContainsKey(bvalue))
                                    {
                                        bindings[name].Add(bvalue, new[] {item[4], item[5], item[6], item[7]});
                                    }
                                    else
                                    {
                                        bindings[name][bvalue]  = new[] { item[4], item[5], item[6], item[7] };
                                    }
                                }
                            }

                            //Get js event
                            var jsobj = new Dictionary<string, object>
                            {
                                {"_a", "sGetPageEventFunction"},
                                {
                                    "_c", new Dictionary<string, object>
                                    {
                                        {"PageTemplateId", rootTemplateId}
                                    }
                                }
                            };

                            var rjsobj = _s.P(jsobj);
                            var jsrecords = robj.GetType().GetProperty("Records").GetValue(rjsobj, null) as List<object[]>;

                            if (jsrecords != null && jsrecords.Count > 0)
                            {
                                foreach (var item in jsrecords)
                                {
                                    var type = Convert.ToInt32(item[1]);
                                    switch (type)
                                    {
                                        case 1:
                                            item[1] = "click";
                                            break;
                                        case 2:
                                            item[1] = "change";
                                            break;
                                    }
                                }
                            }


                            IGenerator g = new Generator();
                            g.GenerateToFile(_tpl["aspx"], aspxPath
                                , new object[] { pageName, nameSpace, template });
                            g.GenerateToFile(_tpl["aspx.cs"], behindPath
                                , new object[] { pageName, nameSpace, requestFields, requestFieldDefaultValues, paterns, crecords, bindings });

                            g.GenerateToFile(_tpl["js"], jsPath
                               , new object[] { jsrecords });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex);
            }
        }

        public void BuildPageFast(int pageId, string nameSpace)
        {
            try
            {
                var tobj = new Dictionary<string, object>
                {
                    {"_a", "fGetgc_Page"},
                    {
                        "_c", new Dictionary<string, object>
                        {
                            {"Id", pageId}
                        }
                    },
                    {"_f", "Id, Name"}
                };
                var trobj = _s.P(tobj);
                var trecords = trobj.GetType().GetProperty("Records").GetValue(trobj, null) as List<object[]>;
                if (trecords != null && trecords.Count > 0)
                {
                    //Get page template
                    var obj = new Dictionary<string, object>
                    {
                        {"_a", "fGetgc_Page_Template"},
                        {
                            "_c", new Dictionary<string, object>
                            {
                                {"PageId", pageId}
                            }
                        },
                        {"_f", "Id"}
                    };

                    var robj = _s.P(obj);
                    var records = robj.GetType().GetProperty("Records").GetValue(robj, null) as List<object[]>;

                    if (records != null)
                    {
                        //Get template
                        var template = BuildTemplateFast01(Convert.ToInt32(records[0][0]));

                        //Get page params
                        var pobj = new Dictionary<string, object>
                        {
                            {"_a", "fGetgc_Page_Param"},
                            {
                                "_c", new Dictionary<string, object>
                                {
                                    {"PageId", pageId}
                                }
                            },
                            {"_f", "Name"}
                        };

                        var probj = _s.P(pobj);
                        var precords = robj.GetType().GetProperty("Records").GetValue(probj, null) as List<object[]>;

                        //Get page url paterns
                        //Get page params
                        var uobj = new Dictionary<string, object>
                        {
                            {"_a", "fGetgc_Page_URLFormat"},
                            {
                                "_c", new Dictionary<string, object>
                                {
                                    {"PageId", pageId}
                                }
                            },
                            {"_f", "HasKey, ParseFormat"}
                        };


                        var urobj = _s.P(uobj);
                        var urecords = robj.GetType().GetProperty("Records").GetValue(urobj, null) as List<object[]>;


                        if (!String.IsNullOrEmpty(template))
                        {
                            var pageName = Convert.ToString(trecords[0][1]);
                            var aspxPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory,
                                String.Format(ConfigurationManager.AppSettings["AppBuilderPath"] + "\\{0}.aspx",
                                    pageName));
                            var behindPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory,
                                String.Format(ConfigurationManager.AppSettings["AppBuilderPath"] + "\\{0}.aspx.cs",
                                    pageName));

                            var requestFields = new List<string>();
                            var requestFieldDefaultValues = new List<string>();
                            if (precords != null)
                            {
                                foreach (var p in precords)
                                {
                                    requestFields.Add(Convert.ToString(p[0]));
                                    requestFieldDefaultValues.Add(String.Empty);
                                }
                            }

                            var paterns = new Dictionary<string, string>();
                            if (urecords != null)
                            {
                                foreach (var u in urecords)
                                {
                                    paterns.Add(Convert.ToString(u[0]), Convert.ToString(u[1]));
                                }
                            }

                            //Get config data
                            var cobj = new Dictionary<string, object>
                            {
                                {"_a", "fGetgc_Page_Data_View00"},
                                {
                                    "_c", new Dictionary<string, object>
                                    {
                                        {"PageId", pageId}
                                    }
                                },
                                {"_f", "Name, Action , Conditions, Fields"}
                            };

                            var crobj = _s.P(cobj);
                            var crecords = robj.GetType().GetProperty("Records").GetValue(crobj, null) as List<object[]>;
                            
                            if (crecords != null)
                            {
                                foreach (var item in crecords)
                                {
                                    var tmp = Convert.ToString(item[2]).Split(new[] { ',' });
                                    var cItem = new StringBuilder("");
                                    foreach (var it in tmp)
                                    {
                                        var tmp2 = Convert.ToString(it).Split(new[] { ':' });
                                        var type = Convert.ToInt32(tmp2[0]);
                                        if (3 == type)
                                        {
                                            cItem.Append(String.Format("{{ \"{0}\", _requestParams[\"{1}\"] }},",
                                                new object[] { tmp2[1], tmp2[2] }));
                                        }
                                        else
                                        {
                                            cItem.Append(String.Format("{{ \"{0}\", \"{1}\" }},",
                                                new object[] { tmp2[1], tmp2[2] }));
                                        }
                                    }
                                    item[2] = cItem.ToString().Trim(new[] { ',' });

                                    var tmp3 = Convert.ToString(item[3]).Split(new[] { ',' });
                                    var fItem = new StringBuilder("");
                                    foreach (var ft in tmp3)
                                    {
                                        fItem.Append(String.Format("\"{0}\",", ft));
                                    }
                                    item[3] = fItem.ToString().Trim(new[] { ',' });
                                }
                            }


                            IGenerator g = new Generator();
                            g.GenerateToFile(_tpl["aspx"], aspxPath
                                , new object[] { pageName, nameSpace, template });
                            g.GenerateToFile(_tpl["aspx.cs"], behindPath
                                , new object[] { pageName, nameSpace, requestFields, requestFieldDefaultValues, paterns, crecords });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex);
            }
        }

        /// 
        /// <param name="pageId"></param>
        public string BuildCodeBehind(int pageId)
        {
            return "";
        }

        /// 
        /// <param name="pageId"></param>
        public string BuildJS(int pageId)
        {
            return "";
        }
    }
} //end DotNetWebFormBuilder