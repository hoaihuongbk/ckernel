///////////////////////////////////////////////////////////
//  FileWriter.cs
//  Implementation of the Class FileWriter
//  Generated by Enterprise Architect
//  Created on:      15-Dec-2014 3:35:21 PM
//  Original author: baovan
///////////////////////////////////////////////////////////

using System;
using System.Configuration;
using System.Diagnostics;
using System.IO;
using System.Xml;

namespace CTool.Builder.File
{
    public class FileWriter
    {
        /// <summary>
        /// Write content to file
        /// </summary>
        /// <param name="path"></param>
        /// <param name="content"></param>
        /// <returns></returns>
        public bool WriteFile(string path, string content)
        {
            try
            {
                System.IO.File.WriteAllText(path, content);
                return true;
            }
            catch (IOException ex)
            {
                Debug.WriteLine(ex);
            }
            return false;
        }

        public bool GenerateAppDirectory(string appName, string xmlPath)
        {
            try
            {
                //Create app directory
                var appPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory,
                    String.Format(ConfigurationManager.AppSettings["AppBuilderPath"] + "\\{0}", appName));

                if (!Directory.Exists(appPath))
                {
                    Directory.CreateDirectory(appPath);
                }

                var doc = new XmlDocument();
                doc.Load(xmlPath);

                var app = doc.SelectNodes("//appDirectory");
                if (app == null) return true;
                for (var i = 0; i < app[0].ChildNodes.Count; i++)
                {
                    var xmlNode = app[0].ChildNodes.Item(i);
                    if (xmlNode == null) continue;
                    if (xmlNode.Attributes == null) continue;
                    var dpath = String.Format(appPath + "\\{0}", xmlNode.Attributes["name"].Value);
                    if (!Directory.Exists(dpath))
                    {
                        Directory.CreateDirectory(dpath);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex);
            }

            return false;
        }
    }
} //end FileWriter