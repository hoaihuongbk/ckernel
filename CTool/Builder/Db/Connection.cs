using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Web;
using OMS.Ice.T4Generator;

namespace CTool.Builder.Db
{
    public class Connection
    {
        private readonly string _conStr;

        public Connection(string conStr)
        {
            _conStr = conStr;
        }

        public DataTable GetAllTables()
        {
            var dt = new DataTable();
            using (var conn = new SqlConnection(_conStr))
            {
                conn.Open();
                var cmd = new SqlCommand("SELECT name, object_id FROM sys.tables WHERE (schema_id = SCHEMA_ID('dbo') and name != N'sysdiagrams') order by create_date asc", conn);
                var adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                //conn.Close();
            }
            return dt;
        }


        public DataTable GetObjectMetaData(int objId)
        {
            var dt = new DataTable();
            using (var conn = new SqlConnection(_conStr))
            {
                conn.Open();
                var cmd =
                    new SqlCommand(
                        String.Format(
                            "SELECT c.name, c.is_nullable, c.max_length, t.name as type_name, ISNULL(i.is_primary_key, 0) as is_primary_key, OBJECT_NAME(fc.referenced_object_id) as ftable, COL_NAME(fc.referenced_object_id, fc.referenced_column_id) as fcolumn FROM sys.columns c" +
                            " INNER JOIN sys.types t ON c.user_type_id = t.user_type_id" +
                            " LEFT OUTER JOIN sys.index_columns ic ON ic.object_id = c.object_id AND ic.column_id = c.column_id " +
                            " LEFT OUTER JOIN sys.indexes i ON ic.object_id = i.object_id AND ic.index_id = i.index_id" +
                            " LEFT OUTER JOIN sys.foreign_key_columns fc ON ic.column_id = fc.parent_column_id AND ic.object_id = fc.parent_object_id" +
                            " where c.object_id = {0}",
                            objId),
                        conn);
                var adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                //conn.Close();
            }
            return dt;
        }

        public void GenerateView(string tableName, string viewName, List<string> columns)
        {
            using (var conn = new SqlConnection(_conStr))
            {
                conn.Open();

                var command = conn.CreateCommand();

                // Start a local transaction.
                var transaction = conn.BeginTransaction("GenerateView");

                // Must assign both transaction object and connection 
                // to Command object for a pending local transaction
                command.Connection = conn;
                command.Transaction = transaction;

                try
                {
                    command.CommandText =
                        String.Format(
                            "IF EXISTS (SELECT name FROM sys.views WHERE name = N'{0}') DROP VIEW dbo.{0}",
                            viewName);
                    command.ExecuteNonQuery();

                    command.CommandText =
                        String.Format("CREATE VIEW dbo.{0} WITH SCHEMABINDING AS SELECT {1} FROM dbo.{2}",
                            viewName, String.Join(",", columns), tableName);
                    command.ExecuteNonQuery();

                    //Add extend property to view, MS_View_Type 1: view is generated by tool
                    command.CommandText =
                        String.Format(
                            "IF object_id('sys.sp_addextendedproperty') IS NOT NULL" + 
                            " EXEC sys.sp_addextendedproperty @name = N'CKernel_Build_In_View', @value = 1, @level0type = N'SCHEMA', @level0name = 'dbo', @level1type = N'VIEW',  @level1name = '{0}'",
                            viewName);
                    command.ExecuteNonQuery();

                    //Add index on View
                    command.CommandText = String.Format("CREATE UNIQUE CLUSTERED INDEX idx_{0}_Id ON {0}(Id)",
                        viewName);
                    command.ExecuteNonQuery();

                    transaction.Commit();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    Debug.WriteLine(ex);
                }
            }
        }

        public void DropView(string viewName)
        {
            using (var conn = new SqlConnection(_conStr))
            {
                conn.Open();

                var command = conn.CreateCommand();

                // Start a local transaction.
                var transaction = conn.BeginTransaction("DropView");

                // Must assign both transaction object and connection 
                // to Command object for a pending local transaction
                command.Connection = conn;
                command.Transaction = transaction;

                try
                {
                    command.CommandText =
                        String.Format(
                            "IF EXISTS (SELECT name FROM sys.views WHERE name = N'{0}') DROP VIEW dbo.{0}",
                            viewName);
                    command.ExecuteNonQuery();
                    transaction.Commit();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    Debug.WriteLine(ex);
                }
            }
        }

        public void GenerateStoredProcedure(string sp)
        {
            using (var conn = new SqlConnection(_conStr))
            {
                conn.Open();

                var command = conn.CreateCommand();

                // Start a local transaction.
                var transaction = conn.BeginTransaction("GenerateStoredProcedure");

                // Must assign both transaction object and connection 
                // to Command object for a pending local transaction
                command.Connection = conn;
                command.Transaction = transaction;

                try
                {
                    var splitter = new[] {"\r\nGO\r\n"};
                    var commandTexts = sp.Split(splitter, StringSplitOptions.RemoveEmptyEntries);
                    foreach (var commandText in commandTexts)
                    {
                        command.CommandText = commandText;
                        command.ExecuteNonQuery();
                    }

                    transaction.Commit();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    Debug.WriteLine(ex);
                }
            }
        }

        public DataTable GetAllExtendView()
        {
            var dt = new DataTable();
            try
            {
                using (var conn = new SqlConnection(_conStr))
                {
                    conn.Open();
                    var cmd = new SqlCommand("SELECT v.name, v.object_id FROM sys.views v" +
                                             " WHERE NOT EXISTS(" +
                                             " SELECT objname FROM fn_listextendedproperty (NULL, 'schema', 'dbo', 'view', default, NULL, NULL) fe" +
                                             " WHERE v.name collate SQL_Latin1_General_CP1_CI_AS = fe.objname collate SQL_Latin1_General_CP1_CI_AS" +
                                             " AND name = N'CKernel_Build_In_View')" +
                                             " ORDER BY v.create_date ASC", conn);
                    var adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    //conn.Close();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex);
            }
            return dt;
        }

        public void DropAll(string sp)
        {
            using (var conn = new SqlConnection(_conStr))
            {
                conn.Open();

                var command = conn.CreateCommand();

                // Start a local transaction.
                var transaction = conn.BeginTransaction("DropAllTransaction");

                // Must assign both transaction object and connection 
                // to Command object for a pending local transaction
                command.Connection = conn;
                command.Transaction = transaction;

                try
                {
                    var splitter = new[] {"\r\nGO\r\n"};
                    var commandTexts = sp.Split(splitter, StringSplitOptions.RemoveEmptyEntries);
                    foreach (var commandText in commandTexts)
                    {
                        command.CommandText = commandText;
                        command.ExecuteNonQuery();
                    }

                    transaction.Commit();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    Debug.WriteLine(ex);
                }
            }
        }

        public DataTable GetAllExtendStoredProcedure()
        {
            var dt = new DataTable();
            using (var conn = new SqlConnection(_conStr))
            {
                conn.Open();
                var cmd = new SqlCommand("SELECT sp.name, sp.object_id FROM sys.procedures sp" +
                                         " WHERE NOT EXISTS(" +
                                         " SELECT objname FROM fn_listextendedproperty (NULL, 'schema', 'dbo', 'procedure', default, NULL, NULL) fe" +
                                         " WHERE sp.name collate SQL_Latin1_General_CP1_CI_AS = fe.objname collate SQL_Latin1_General_CP1_CI_AS" +
                                         " AND name = N'CKernel_Build_In_Procedure')" +
                                         " ORDER BY sp.create_date ASC", conn);
                var adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                //conn.Close();
            }
            return dt;
        }

        public DataTable GetParameterMetaData(int objId)
        {
            var dt = new DataTable();
            using (var conn = new SqlConnection(_conStr))
            {
                conn.Open();
                var cmd =
                    new SqlCommand(
                        String.Format(
                            "SELECT SUBSTRING(sp.name,2, LEN(sp.name)) as name, sp.max_length, t.name as type_name FROM sys.parameters sp" +
                            " INNER JOIN sys.types t ON sp.user_type_id = t.user_type_id" +
                            " WHERE object_id = {0} and is_output = 0", objId), conn);
                var adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                //conn.Close();
            }
            return dt;
        }

        public void DropViewExtendProperty(string viewName)
        {
            using (var conn = new SqlConnection(_conStr))
            {
                conn.Open();

                var command = conn.CreateCommand();

                // Start a local transaction.
                var transaction = conn.BeginTransaction("DropViewExtendProperty");

                // Must assign both transaction object and connection 
                // to Command object for a pending local transaction
                command.Connection = conn;
                command.Transaction = transaction;

                try
                {
                    //Add extend property to view, MS_View_Type 1: view is generated by tool
                    command.CommandText =
                        String.Format(
                            "IF object_id('sys.sp_dropextendedproperty ') IS NOT NULL" +
                            " EXEC sys.sp_dropextendedproperty @name = N'CKernel_Build_In_View', @level0type = N'SCHEMA', @level0name = 'dbo', @level1type = N'VIEW', @level1name = '{0}'", viewName);
                    command.ExecuteNonQuery();

                    transaction.Commit();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    Debug.WriteLine(ex);
                }
            }
        }

        public DataTable GetAllBuildInView()
        {
            var dt = new DataTable();
            using (var conn = new SqlConnection(_conStr))
            {
                conn.Open();
                var cmd = new SqlCommand("SELECT v.name, v.object_id FROM sys.views v" +
                                         " WHERE EXISTS(" +
                                         " SELECT objname FROM fn_listextendedproperty (NULL, 'schema', 'dbo', 'view', default, NULL, NULL) fe" +
                                         " WHERE v.name collate SQL_Latin1_General_CP1_CI_AS = fe.objname collate SQL_Latin1_General_CP1_CI_AS" +
                                         " AND name = N'CKernel_Build_In_View')" +
                                         " ORDER BY v.create_date ASC", conn);
                var adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
            }
            return dt;
        }

        public string GenerateCRUD(string tableName, List<object[]> columns)
        {
            try
            {
                var stpl = HttpContext.Current.Server.MapPath("~/Templates/Db/CRUD.t4");
                //IGenerator g = new Generator();
                //var strWriter = new StringWriter();
                //g.Generate(stpl, strWriter, tableName, columns);
                //return strWriter.ToString();

                IGenerator generator = new Generator();

                var stream = new MemoryStream();
                var textWriter = new StreamWriter(stream);

                generator.Generate(stpl, textWriter, new object[]{ tableName, columns });

                stream.Seek(0, SeekOrigin.Begin);
                var textReader = new StreamReader(stream);

               return textReader.ReadToEnd();

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex);
            }

            return String.Empty;
        }
    }
}